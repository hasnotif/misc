#!/usr/bin/env python3
# filter_refseq.py v0.2
# Reads in NCBI sequence files and filters them based on user's input taxonomic groups

import os
import argparse
import gzip
import glob

def main():
    cwd = os.getcwd() # must be in $DB_NAME/ 
    db_path = cwd

    parser = argparse.ArgumentParser(description = "Reads in NCBI sequence files and filters them according to taxonomic groups")
    parser.add_argument("-i", help = "specify file containing all descendant nodes under user's taxonomic groups", default = "desc_taxids.txt") # generated by filter_ncbi_taxonomy.py
    parser.add_argument("-o", "--output_directory", help = "specify output directory of filtered sequence files", default = cwd)
    args = parser.parse_args()

    print("Reading descendant taxids")
    os.chdir(os.path.join(cwd, "taxonomy"))
    with open(args.i, "r") as r:
        desc_taxids = r.readlines()
        desc_taxids2 = []
        for taxid in desc_taxids:
            taxid2 = taxid.strip("\n")
            desc_taxids2.append(taxid2)

    print("Loading catalog dict")
    os.chdir(db_path)
    catalog_dict = load_catalog_dict(desc_taxids2)

    print("Filtering RefSeq sequences")
    os.chdir(os.path.join(os.getcwd(), "sequences"))
    file_list = os.listdir(os.getcwd())
    for file in file_list:
        if file.endswith(".fna.gz"):
            with gzip.open(file, 'rt') as r:
                copyflag = False
                for line in r:
                    if line.startswith(">"):
                        acc = extract_acc(line)
                        if catalog_dict[acc] in desc_taxids2:
                            copyflag = True
                        else:
                            copyflag = False
                    if copyflag == True:
                        with open("filtered_refseq.fna", "a") as a:
                            a.write(line)

    # PSEUDOCODE FOR FILTERING ALGO:
    # for each .fna.gz file
    #   copyflag = false
    #   for each line
    #       if line.startswith(">")
    #           extract accession number
    #               if taxid inside desc_taxids2 -> taxid from catalog_dict[accession number]
    #                   copyflag = true
    #               else
    #                   copyflag = false
    #       if copyflag == true
    #           copy line into new file

def load_catalog_dict(taxids):
    dict = {} # key = accession number, value = taxid

    with gzip.open("RefSeq-release210.catalog.gz", 'rt') as r:
        for line in r:
            tab = line.split("\t")
            taxid = tab[0]
            acc = tab[2]
            if taxid in taxids:
                dict[acc] = taxid # only taxids of descendant nodes get loaded

    return dict

# eg. ">NC_000001.1 species_name..."
def extract_acc(line):
    idx1 = line.index(">")
    idx2 = line.index(" ")
    acc = line[idx1+1:idx2]
    return acc
        
if __name__ == "__main__":
    main()

